/**
 * You find a strange mirror that always shows a hand that is moving. The hand appears to be alive, and after a lot of questions of "yes" and "no" answer, you know that the hand is trying to teach you a program that is written in HPL (Hand Programming Language).
 * This language works with a memory of an indefinite size of bytes, with all values initialized to 0. This language haves 7 action:
 *ðŸ‘‰ : moves the memory pointer to the next cell
 *ðŸ‘ˆ : moves the memory pointer to the previous cell
 *ðŸ‘† : increment the memory cell at the current position
 *ðŸ‘‡ : decreases the memory cell at the current position.
 *ðŸ¤œ : if the memory cell at the current position is 0, jump just after the corresponding ðŸ¤›
 *ðŸ¤› : if the memory cell at the current position is not 0, jump just after the corresponding ðŸ¤œ
 *ðŸ‘Š : Display the current character represented by the ASCII code defined by the current position.
 */

const MIN_CELL = 0
const MAX_CELL = 255

const clamp = (value) => {
  if (value > MAX_CELL) return MIN_CELL
  if (value < MIN_CELL) return MAX_CELL
  return value
}

const getNextFistIndex = (index, instructions) => {
  let fists = 1
  for (let i = index + 1; i < instructions.length; i++) {
    if (instructions[i] === 'ðŸ¤œ') fists++
    if (instructions[i] === 'ðŸ¤›') fists--
    if (fists === 0) return i
  }
}

const getPrevFistIndex = (index, instructions) => {
  let fists = 1
  for (let i = index - 1; i >= 0; i--) {
    if (instructions[i] === 'ðŸ¤›') fists++
    if (instructions[i] === 'ðŸ¤œ') fists--
    if (fists === 0) return i
  }
}

const INVALID_ARG_ERROR = 'The function receives a string as an argument'
const INVALID_ARG_PATTERN_ERROR = 'TThe string must be a set of hand emoji characters like: ðŸ‘‰ðŸ‘ˆðŸ‘†ðŸ‘‡ðŸ¤œðŸ¤›ðŸ‘Š'

const pattern = /^[ðŸ‘‰ðŸ‘ˆðŸ‘†ðŸ‘‡ðŸ¤œðŸ¤›ðŸ‘Š]+$/u

function translate(string) {
  if (arguments.length !== 1) throw new Error(INVALID_ARG_ERROR)

  if (typeof string !== 'string') throw new Error(INVALID_ARG_ERROR)

  if (!pattern.test(string)) throw new Error(INVALID_ARG_PATTERN_ERROR)

  const memory = [0]

  let pointer = 0
  let index = 0
  let output = ''

  const arrayOfInstructions = Array.from(string)

  const actions = {
    'ðŸ‘‰': () => {
      pointer++
      memory[pointer] ??= 0
    },
    'ðŸ‘ˆ': () => {
      pointer--
      memory[pointer] ??= 0
    },
    'ðŸ‘†': () => {
      memory[pointer] = clamp(memory[pointer] + 1)
    },
    'ðŸ‘‡': () => {
      memory[pointer] = clamp(memory[pointer] - 1)
    },
    'ðŸ¤œ': () => {
      if (memory[pointer] === 0) {
        index = getNextFistIndex(index, arrayOfInstructions)
      }
    },
    'ðŸ¤›': () => {
      if (memory[pointer] !== 0) {
        index = getPrevFistIndex(index, arrayOfInstructions)
      }
    },
    'ðŸ‘Š': () => {
      output += String.fromCharCode(memory[pointer])
    }
  }

  while (index < arrayOfInstructions.length) {
    const action = arrayOfInstructions[index]
    actions[action]()
    index++
  }

  return output
}

translate(
  'ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š'
)

module.exports = { translate, INVALID_ARG_ERROR, INVALID_ARG_PATTERN_ERROR }
